@model SIGEM_BIDSS.Models.tbInstitucionesFinancieras

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .validation-error {
        color: red;
        font-size: small;
    }

    .validation-summary-errors {
        color: red;
        font-size: small;
    }

    .required:after {
        content: "*";
        font-weight: bold;
        color: red;
    }

    #tmo_Nombre {
        text-transform: uppercase;
    }

    #insf_DescInstitucionFinanc {
        text-transform: uppercase;
    }
</style>

<div class="card card-primary card-outline">
    <div class="card-header d-flex p-0 ui-sortable-handle">
        <h3 class="card-title p-3">
            <i class="fa fa-upload mr-1"></i>
            Insertar Institucion Finaciera
        </h3>
        <ul class="nav nav-pills ml-auto p-2">
            <li class="nav-item">
                @Html.ActionLink("Regresar", "Index", null, new { @class = "btn btn-primary" })
            </li>
        </ul>
    </div>
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <div class="card-body">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.insf_DescInstitucionFinanc, htmlAttributes: new { @class = "control-label col-sm-2" })
                <div class="col-sm-4">
                    @Html.EditorFor(model => model.insf_DescInstitucionFinanc, new { htmlAttributes = new { @class = "form-control", maxlength = "100", autocomplete = "off", @onkeypress = "return soloLetras(event)", @onkeyup = "this.value=this.value.toUpperCase()" } })
                    <p style="color:red">@Html.ValidationMessageFor(model => model.insf_DescInstitucionFinanc, "", new { @class = "text-danger" })</p>
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.insf_Contacto, htmlAttributes: new { @class = "control-label col-sm-2" })
                <div class="col-sm-4">
                    @Html.EditorFor(model => model.insf_Contacto, new { htmlAttributes = new { @class = "form-control", maxlength = "100", autocomplete = "off", @onkeypress = "return soloLetras(event)", @onkeyup = "this.value=this.value.toUpperCase()" } })
                    <p style="color:red">@Html.ValidationMessageFor(model => model.insf_Contacto, "", new { @class = "text-danger" })</p>
                </div>
            </div>
            <div class="form-group ">
                @Html.LabelFor(model => model.insf_Telefono, htmlAttributes: new { @class = "control-label col-md-8" })
                <div class="col-sm-4">
                    @Html.EditorFor(model => model.insf_Telefono, new { htmlAttributes = new { @class = "form-control", @OnKeyPress = "return soloNumeros(event)" } })
                    @Html.ValidationMessageFor(model => model.insf_Telefono, "", new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.insf_Contacto, htmlAttributes: new { @class = "control-label col-sm-2" })
                    <div class="col-sm-4">
                        @Html.EditorFor(model => model.insf_Contacto, new { htmlAttributes = new { @class = "form-control", maxlength = "100", autocomplete = "off", @onkeypress = "return soloLetras(event)", @onkeyup = "this.value=this.value.toUpperCase()" } })
                        <p style="color:red">@Html.ValidationMessageFor(model => model.insf_Contacto, "", new { @class = "text-danger" })</p>
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.insf_Correo, htmlAttributes: new { @class = "control-label col-md-8" })
                    <div class="col-sm-4">
                        @Html.EditorFor(model => model.insf_Correo, new { htmlAttributes = new { @class = "form-control" } })
                        <p id="emailOK" style="color:red">@Html.ValidationMessageFor(model => model.insf_Correo, "", new { @class = "text-danger" })</p>
                    </div>
                </div>


                <div class="form-group">
                    <div class="col-md-offset-4 col-md-10">
                        <input type="submit" value="Guardar" id="Save" class="btn btn-primary" />
                        @Html.ActionLink("Cancelar", "Index", null, new { @class = "btn btn-default" })
                    </div>
                </div>
                
            </div>
       

            <script>
                ///validar solo letras
                ///validar solo letras
                function soloLetras(e) {
                    key = e.keyCode || e.which;
                    tecla = String.fromCharCode(key).toLowerCase();
                    letras = "$# '/áéíóúabcdefghijklmnñopqrstuvwxyz";
                    especiales = "8-37-39-46";

                    tecla_especial = false
                    for (var i in especiales) {
                        if (key == especiales[i]) {
                            tecla_especial = true;
                            break;
                        }
                    }

                    if (letras.indexOf(tecla) == -1 && !tecla_especial) {
                        return false;
                    }
                }
                function noespaciosincio(e) {
                    var valor = e.value.replace(/^ */, '');
                    e.value = valor;
                }



                document.getElementById("Save").onclick = function () {
                    var txtObj = document.getElementById("des");
                    txtObj.value = txtObj.value.replace(/^\s+/, ""); //Left trim
                    txtObj.value = txtObj.value.replace(/\s+$/, ""); //Right trim




                };
            </script>
        </div>
    </div>
    }