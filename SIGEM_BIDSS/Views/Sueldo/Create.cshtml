@model SIGEM_BIDSS.Models.tbSueldo

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<input type="hidden" id="vSwal" value="@TempData["swalfunction"]" />
<style>
    .validation-error {
        color: red;
        font-size: small;
    }

    .validation-summary-errors {
        color: red;
        font-size: small;
    }

    .required:after {
        content: "*";
        font-weight: bold;
        color: red;
    }

    #are_Descripcion {
        text-transform: uppercase;
    }
</style>

<div class="card card-primary card-outline">
    <div class="card-header d-flex p-0 ui-sortable-handle">
        <h3 class="card-title p-3">
            <i class="fa fa-upload mr-1"></i>
            Insertar Sueldo
        </h3>
        <ul class="nav nav-pills ml-auto p-2">
            <li class="nav-item">
                @Html.ActionLink("Regresar", "Index", null, new { @class = "btn btn-primary" })
            </li>
        </ul>
    </div>
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <div class="card-body">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.emp_Id, htmlAttributes: new { @class = "control-label col-md-8" })
                    @if (ViewBag.empIsNull == 0 || ViewBag.empIsNull == null)
                    {

                        @Html.DropDownList("emp_Id", null, "Seleccione", htmlAttributes: new { @class = "form-control" })
                    }
                    else
                    {
                        @Html.HiddenFor(model => model.emp_Id)
                        @Html.DropDownList("emp_Id", null, htmlAttributes: new { @class = "form-control", @disabled = "disabled" })
                    }
                    @Html.ValidationMessageFor(model => model.emp_Id, "", new { @class = "text-danger", @id = "emp" })
                </div>



                <div class="form-group">
                    @Html.LabelFor(model => model.Cantidad, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.Cantidad, new { htmlAttributes = new { @class = "form-control", @OnKeyPress = "return soloNumeros(event)", @onChange = "MASK(this,this.value,'-###,###,###,##0.00',1)" } })
                        @Html.ValidationMessageFor(model => model.Cantidad, "", new { @class = "text-danger", @id = "cant" })

                    </div>
                </div>



                <div class="form-group">
                    @Html.LabelFor(model => model.tmo_Id, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.DropDownList("tmo_Id", null, "Seleccione", htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.tmo_Id, "", new { @class = "text-danger", @id = "moneda" })
                    </div>
                </div>


                <div class="form-group">
                    <div class="col-md-offset-4 col-md-4">
                        <input type="submit" value="Guardar" id="Save" class="btn btn-primary" />
                        @Html.ActionLink("Cancelar", "Index", null, new { @class = "btn btn-default" })
                    </div>
                </div>

            </div>


        </div>
    }

</div>


<script src="~/Scripts/jquery-3.3.1.min.js"></script>
<script src="~/Content/template/plugins/datepicker/js/bootstrap-datepicker.min.js"></script>
<script src="~/Content/template/plugins/bs-custom-file-input/bs-custom-file-input.min.js"></script>
<script src="~/Content/template/plugins/input-mask/jquery.inputmask.js"></script>
<script src="~/Scripts/app/Empleados.js"></script>
<script src="~/Scripts/app/General_PCAE.js"></script>

<script type="text/javascript">



    // formatea un numero según una mascara dada ej: "-$###,###,##0.00"
    //
    // elm   = elemento html <input> donde colocar el resultado
    // n     = numero a formatear
    // mask  = mascara ej: "-$###,###,##0.00"
    // force = formatea el numero aun si n es igual a 0
    //
    // La función devuelve el numero formateado



    function MASK(form, n, mask, format) {
        if (format == "undefined") format = false;
        if (format || NUM(n)) {
            dec = 0, point = 0;
            x = mask.indexOf(".") + 1;
            if (x) { dec = mask.length - x; }



            if (dec) {
                n = NUM(n, dec) + "";
                x = n.indexOf(".") + 1;
                if (x) { point = n.length - x; } else { n += "."; }
            } else {
                n = NUM(n, 0) + "";
            }
            for (var x = point; x < dec; x++) {
                n += "0";
            }
            x = n.length, y = mask.length, XMASK = "";
            while (x || y) {
                if (x) {
                    while (y && "#0.".indexOf(mask.charAt(y - 1)) == -1) {
                        if (n.charAt(x - 1) != "-")
                            XMASK = mask.charAt(y - 1) + XMASK;
                        y--;
                    }
                    XMASK = n.charAt(x - 1) + XMASK, x--;
                } else if (y && "$0".indexOf(mask.charAt(y - 1)) + 1) {
                    XMASK = mask.charAt(y - 1) + XMASK;
                }
                if (y) { y-- }
            }
        } else {
            XMASK = "";
        }
        if (form) {
            form.value = XMASK;
            if (NUM(n) < 0) {
                form.style.color = "#FF0000";
            } else {
                form.style.color = "#000000";
            }
        }
        return XMASK;
    }



    // Convierte una cadena alfanumérica a numérica (incluyendo formulas aritméticas)
    //
    // s   = cadena a ser convertida a numérica
    // dec = numero de decimales a redondear
    //
    // La función devuelve el numero redondeado



    function NUM(s, dec) {
        for (var s = s + "", num = "", x = 0; x < s.length; x++) {
            c = s.charAt(x);
            if (".-+/*".indexOf(c) + 1 || c != " " && !isNaN(c)) { num += c; }
        }
        if (isNaN(num)) { num = eval(num); }
        if (num == "") { num = 0; } else { num = parseFloat(num); }
        if (dec != undefined) {
            r = .5; if (num < 0) r = -r;
            e = Math.pow(10, (dec > 0) ? dec : 0);
            return parseInt(num * e + r) / e;
        } else {
            return num;
        }
    }



</script>

<script>

    $("#emp_Id").keyup(function () {
        $('#emp').hide();
    });

    $("#tmo_Id").keyup(function () {
        $('#moneda').hide();
    });

    $("#Cantidad").keyup(function () {
        $('#cant').hide();
    });

</script>
